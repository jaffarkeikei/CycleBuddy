{"$message_type":"diagnostic","message":"cannot find macro `format` in this scope","code":null,"level":"error","spans":[{"file_name":"data-sharing/src/lib.rs","byte_start":2765,"byte_end":2771,"line_start":107,"line_end":107,"column_start":38,"column_end":44,"is_primary":true,"text":[{"text":"            &String::from_str(&env, &format!(\"{:?}_{:?}_{}\", owner, recipient, env.ledger().timestamp()))","highlight_start":38,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find macro `format` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdata-sharing/src/lib.rs:107:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   &String::from_str(&env, &format!(\"{:?}_{:?}_{}\", owner, recipient, env.ledger().timestamp()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Symbol`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"data-sharing/src/lib.rs","byte_start":94,"byte_end":100,"line_start":2,"line_end":2,"column_start":84,"column_end":90,"is_primary":true,"text":[{"text":"use soroban_sdk::{contract, contractimpl, contracttype, Address, Env, Map, String, Symbol, Vec, BytesN};","highlight_start":84,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"data-sharing/src/lib.rs","byte_start":92,"byte_end":100,"line_start":2,"line_end":2,"column_start":82,"column_end":90,"is_primary":true,"text":[{"text":"use soroban_sdk::{contract, contractimpl, contracttype, Address, Env, Map, String, Symbol, Vec, BytesN};","highlight_start":82,"highlight_end":90}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Symbol`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdata-sharing/src/lib.rs:2:84\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse soroban_sdk::{contract, contractimpl, contracttype, Address, Env, Map, String, Symbol, Vec, Byte\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `DataSharingContractClient<'a>: TryFromVal<Env, soroban_sdk::Val>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"data-sharing/src/lib.rs","byte_start":1264,"byte_end":1279,"line_start":58,"line_end":58,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":"the trait `TryFromVal<Env, soroban_sdk::Val>` is not implemented for `DataSharingContractClient<'a>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"data-sharing/src/lib.rs","byte_start":1264,"byte_end":1279,"line_start":58,"line_end":58,"column_start":1,"column_end":16,"is_primary":false,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[soroban_sdk::contractclient]","def_site_span":{"file_name":"/Users/jaffars/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-macros-20.5.0/src/lib.rs","byte_start":17088,"byte_end":17167,"line_start":554,"line_end":554,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub fn contractclient(metadata: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `TryFromVal<E, V>`:\n  `()` implements `TryFromVal<E, [soroban_sdk::Val; 0]>`\n  `()` implements `TryFromVal<E, soroban_sdk::Val>`\n  `()` implements `TryFromVal<Env, ()>`\n  `(T0, T1)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\n  `(T0, T1)` implements `TryFromVal<E, soroban_sdk::Val>`\n  `(T0, T1, T2)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\n  `(T0, T1, T2)` implements `TryFromVal<E, soroban_sdk::Val>`\n  `(T0, T1, T2, T3)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\nand 267 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `DataSharingContractClient<'a>: TryFromVal<Env, soroban_sdk::Val>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdata-sharing/src/lib.rs:58:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[contractimpl]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `TryFromVal<Env, soroban_sdk::Val>` is not implemented for `DataSharingContractClient<'a>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `TryFromVal<E, V>`:\u001b[0m\n\u001b[0m             `()` implements `TryFromVal<E, [soroban_sdk::Val; 0]>`\u001b[0m\n\u001b[0m             `()` implements `TryFromVal<E, soroban_sdk::Val>`\u001b[0m\n\u001b[0m             `()` implements `TryFromVal<Env, ()>`\u001b[0m\n\u001b[0m             `(T0, T1)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\u001b[0m\n\u001b[0m             `(T0, T1)` implements `TryFromVal<E, soroban_sdk::Val>`\u001b[0m\n\u001b[0m             `(T0, T1, T2)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\u001b[0m\n\u001b[0m             `(T0, T1, T2)` implements `TryFromVal<E, soroban_sdk::Val>`\u001b[0m\n\u001b[0m             `(T0, T1, T2, T3)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\u001b[0m\n\u001b[0m           and 267 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `soroban_sdk::contractclient` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"data-sharing/src/lib.rs","byte_start":2740,"byte_end":2833,"line_start":107,"line_end":107,"column_start":13,"column_end":106,"is_primary":true,"text":[{"text":"            &String::from_str(&env, &format!(\"{:?}_{:?}_{}\", owner, recipient, env.ledger().timestamp()))","highlight_start":13,"highlight_end":106}],"label":"expected `&Bytes`, found `&String`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"data-sharing/src/lib.rs","byte_start":2720,"byte_end":2726,"line_start":106,"line_end":106,"column_start":46,"column_end":52,"is_primary":false,"text":[{"text":"        let share_id_preimage = env.crypto().sha256(","highlight_start":46,"highlight_end":52}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&soroban_sdk::Bytes`\n   found reference `&soroban_sdk::String`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/jaffars/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-20.5.0/src/crypto.rs","byte_start":442,"byte_end":448,"line_start":19,"line_end":19,"column_start":12,"column_end":18,"is_primary":true,"text":[{"text":"    pub fn sha256(&self, data: &Bytes) -> BytesN<32> {","highlight_start":12,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdata-sharing/src/lib.rs:107:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0met share_id_preimage = env.crypto().sha256(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   &String::from_str(&env, &format!(\"{:?}_{:?}_{}\", owner, recipient, env.ledger().timestamp()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `&Bytes`, found `&String`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `&soroban_sdk::\u001b[0m\u001b[0m\u001b[1m\u001b[35mBytes\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found reference `&soroban_sdk::\u001b[0m\u001b[0m\u001b[1m\u001b[35mString\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/jaffars/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-20.5.0/src/crypto.rs:19:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn sha256(&self, data: &Bytes) -> BytesN<32> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function takes 1 argument but 2 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"data-sharing/src/lib.rs","byte_start":9908,"byte_end":9911,"line_start":319,"line_end":319,"column_start":41,"column_end":44,"is_primary":false,"text":[{"text":"            admin: Address::from_string(env, \"GBUKOFF6FX6767LKKOD3P7KAS43I3Z7CNUBPCH33YZKPPR53ZDHAHCER\"),","highlight_start":41,"highlight_end":44}],"label":"expected `&String`, found `&Env`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"data-sharing/src/lib.rs","byte_start":9913,"byte_end":9971,"line_start":319,"line_end":319,"column_start":46,"column_end":104,"is_primary":false,"text":[{"text":"            admin: Address::from_string(env, \"GBUKOFF6FX6767LKKOD3P7KAS43I3Z7CNUBPCH33YZKPPR53ZDHAHCER\"),","highlight_start":46,"highlight_end":104}],"label":"unexpected argument #2 of type `&'static str`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"data-sharing/src/lib.rs","byte_start":9887,"byte_end":9907,"line_start":319,"line_end":319,"column_start":20,"column_end":40,"is_primary":true,"text":[{"text":"            admin: Address::from_string(env, \"GBUKOFF6FX6767LKKOD3P7KAS43I3Z7CNUBPCH33YZKPPR53ZDHAHCER\"),","highlight_start":20,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&soroban_sdk::String`\n   found reference `&Env`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/jaffars/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-20.5.0/src/address.rs","byte_start":7878,"byte_end":7889,"line_start":234,"line_end":234,"column_start":12,"column_end":23,"is_primary":true,"text":[{"text":"    pub fn from_string(strkey: &String) -> Self {","highlight_start":12,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"remove the extra argument","code":null,"level":"help","spans":[{"file_name":"data-sharing/src/lib.rs","byte_start":9911,"byte_end":9971,"line_start":319,"line_end":319,"column_start":44,"column_end":104,"is_primary":true,"text":[{"text":"            admin: Address::from_string(env, \"GBUKOFF6FX6767LKKOD3P7KAS43I3Z7CNUBPCH33YZKPPR53ZDHAHCER\"),","highlight_start":44,"highlight_end":104}],"label":null,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","expansion":null},{"file_name":"data-sharing/src/lib.rs","byte_start":9908,"byte_end":9911,"line_start":319,"line_end":319,"column_start":41,"column_end":44,"is_primary":true,"text":[{"text":"            admin: Address::from_string(env, \"GBUKOFF6FX6767LKKOD3P7KAS43I3Z7CNUBPCH33YZKPPR53ZDHAHCER\"),","highlight_start":41,"highlight_end":44}],"label":null,"suggested_replacement":"/* &soroban_sdk::String */","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 1 argument but 2 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdata-sharing/src/lib.rs:319:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m319\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mmin: Address::from_string(env, \"GBUKOFF6FX6767LKKOD3P7KAS43I3Z7CNUBPCH33YZKPPR53ZDHAHCER\"),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munexpected argument #2 of type `&'static str`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `&String`, found `&Env`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35msoroban_sdk::String\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35mEnv\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/jaffars/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-20.5.0/src/address.rs:234:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_string(strkey: &String) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the extra argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m319\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            admin: Address::from_string(\u001b[0m\u001b[0m\u001b[38;5;9menv, \"GBUKOFF6FX6767LKKOD3P7KAS43I3Z7CNUBPCH33YZKPPR53ZDHAHCER\"\u001b[0m\u001b[0m),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m319\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            admin: Address::from_string(\u001b[0m\u001b[0m\u001b[38;5;10m/* &soroban_sdk::String */\u001b[0m\u001b[0m),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `DataSharingContractClient<'_>: TryFromVal<Env, soroban_sdk::Val>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"data-sharing/src/lib.rs","byte_start":1264,"byte_end":1279,"line_start":58,"line_end":58,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":"the trait `TryFromVal<Env, soroban_sdk::Val>` is not implemented for `DataSharingContractClient<'_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"data-sharing/src/lib.rs","byte_start":1264,"byte_end":1279,"line_start":58,"line_end":58,"column_start":1,"column_end":16,"is_primary":false,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[soroban_sdk::contractclient]","def_site_span":{"file_name":"/Users/jaffars/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-macros-20.5.0/src/lib.rs","byte_start":17088,"byte_end":17167,"line_start":554,"line_end":554,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub fn contractclient(metadata: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `TryFromVal<E, V>`:\n  `()` implements `TryFromVal<E, [soroban_sdk::Val; 0]>`\n  `()` implements `TryFromVal<E, soroban_sdk::Val>`\n  `()` implements `TryFromVal<Env, ()>`\n  `(T0, T1)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\n  `(T0, T1)` implements `TryFromVal<E, soroban_sdk::Val>`\n  `(T0, T1, T2)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\n  `(T0, T1, T2)` implements `TryFromVal<E, soroban_sdk::Val>`\n  `(T0, T1, T2, T3)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\nand 267 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Env::invoke_contract`","code":null,"level":"note","spans":[{"file_name":"/Users/jaffars/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-20.5.0/src/env.rs","byte_start":11348,"byte_end":11363,"line_start":357,"line_end":357,"column_start":12,"column_end":27,"is_primary":false,"text":[{"text":"    pub fn invoke_contract<T>(","highlight_start":12,"highlight_end":27}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/jaffars/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-20.5.0/src/env.rs","byte_start":11505,"byte_end":11525,"line_start":364,"line_end":364,"column_start":12,"column_end":32,"is_primary":true,"text":[{"text":"        T: TryFromVal<Env, Val>,","highlight_start":12,"highlight_end":32}],"label":"required by this bound in `Env::invoke_contract`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `DataSharingContractClient<'_>: TryFromVal<Env, soroban_sdk::Val>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdata-sharing/src/lib.rs:58:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[contractimpl]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `TryFromVal<Env, soroban_sdk::Val>` is not implemented for `DataSharingContractClient<'_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `TryFromVal<E, V>`:\u001b[0m\n\u001b[0m              `()` implements `TryFromVal<E, [soroban_sdk::Val; 0]>`\u001b[0m\n\u001b[0m              `()` implements `TryFromVal<E, soroban_sdk::Val>`\u001b[0m\n\u001b[0m              `()` implements `TryFromVal<Env, ()>`\u001b[0m\n\u001b[0m              `(T0, T1)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\u001b[0m\n\u001b[0m              `(T0, T1)` implements `TryFromVal<E, soroban_sdk::Val>`\u001b[0m\n\u001b[0m              `(T0, T1, T2)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\u001b[0m\n\u001b[0m              `(T0, T1, T2)` implements `TryFromVal<E, soroban_sdk::Val>`\u001b[0m\n\u001b[0m              `(T0, T1, T2, T3)` implements `TryFromVal<E, [soroban_sdk::Val; N]>`\u001b[0m\n\u001b[0m            and 267 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Env::invoke_contract`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/jaffars/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-20.5.0/src/env.rs:364:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m357\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn invoke_contract<T>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        T: TryFromVal<Env, Val>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Env::invoke_contract`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `soroban_sdk::contractclient` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `soroban_sdk::String: From<soroban_sdk::Error>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"data-sharing/src/lib.rs","byte_start":1264,"byte_end":1279,"line_start":58,"line_end":58,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":"the trait `From<soroban_sdk::Error>` is not implemented for `soroban_sdk::String`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"data-sharing/src/lib.rs","byte_start":1264,"byte_end":1279,"line_start":58,"line_end":58,"column_start":1,"column_end":16,"is_primary":false,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[soroban_sdk::contractclient]","def_site_span":{"file_name":"/Users/jaffars/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-macros-20.5.0/src/lib.rs","byte_start":17088,"byte_end":17167,"line_start":554,"line_end":554,"column_start":1,"column_end":80,"is_primary":false,"text":[{"text":"pub fn contractclient(metadata: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `From<soroban_sdk::Error>` is not implemented for `soroban_sdk::String`\nbut trait `From<&soroban_sdk::String>` is implemented for it","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for that trait implementation, expected `&soroban_sdk::String`, found `soroban_sdk::Error`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Error` to implement `Into<soroban_sdk::String>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::String` to implement `TryFrom<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `soroban_sdk::String: From<soroban_sdk::Error>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdata-sharing/src/lib.rs:58:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[contractimpl]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<soroban_sdk::Error>` is not implemented for `soroban_sdk::String`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `From<soroban_sdk::\u001b[0m\u001b[0m\u001b[1m\u001b[35mError\u001b[0m\u001b[0m>` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis not\u001b[0m\u001b[0m implemented for `soroban_sdk::String`\u001b[0m\n\u001b[0m           but trait `From<\u001b[0m\u001b[0m\u001b[1m\u001b[35m&\u001b[0m\u001b[0msoroban_sdk::\u001b[0m\u001b[0m\u001b[1m\u001b[35mString\u001b[0m\u001b[0m>` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis\u001b[0m\u001b[0m implemented for it\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for that trait implementation, expected `\u001b[0m\u001b[0m\u001b[1m\u001b[35m&soroban_sdk::String\u001b[0m\u001b[0m`, found `\u001b[0m\u001b[0m\u001b[1m\u001b[35msoroban_sdk::Error\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Error` to implement `Into<soroban_sdk::String>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::String` to implement `TryFrom<soroban_sdk::Error>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `soroban_sdk::contractclient` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `soroban_sdk::Val: TryFromVal<Env, DataSharingContract>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"data-sharing/src/lib.rs","byte_start":1264,"byte_end":1279,"line_start":58,"line_end":58,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":"the trait `TryFromVal<Env, DataSharingContract>` is not implemented for `soroban_sdk::Val`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"data-sharing/src/lib.rs","byte_start":1264,"byte_end":1279,"line_start":58,"line_end":58,"column_start":1,"column_end":16,"is_primary":false,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[contractimpl]","def_site_span":{"file_name":"/Users/jaffars/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-macros-20.5.0/src/lib.rs","byte_start":5863,"byte_end":5940,"line_start":197,"line_end":197,"column_start":1,"column_end":78,"is_primary":false,"text":[{"text":"pub fn contractimpl(metadata: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `TryFromVal<E, V>`:\n  `soroban_sdk::Val` implements `TryFromVal<E, &[u8]>`\n  `soroban_sdk::Val` implements `TryFromVal<E, &str>`\n  `soroban_sdk::Val` implements `TryFromVal<E, ()>`\n  `soroban_sdk::Val` implements `TryFromVal<E, (T0, T1)>`\n  `soroban_sdk::Val` implements `TryFromVal<E, (T0, T1, T2)>`\n  `soroban_sdk::Val` implements `TryFromVal<E, (T0, T1, T2, T3)>`\n  `soroban_sdk::Val` implements `TryFromVal<E, (T0, T1, T2, T3, T4)>`\n  `soroban_sdk::Val` implements `TryFromVal<E, (T0, T1, T2, T3, T4, T5)>`\nand 87 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Val` to implement `FromVal<Env, DataSharingContract>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `DataSharingContract` to implement `IntoVal<Env, soroban_sdk::Val>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `soroban_sdk::Val: TryFromVal<Env, DataSharingContract>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdata-sharing/src/lib.rs:58:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[contractimpl]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `TryFromVal<Env, DataSharingContract>` is not implemented for `soroban_sdk::Val`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `TryFromVal<E, V>`:\u001b[0m\n\u001b[0m             `soroban_sdk::Val` implements `TryFromVal<E, &[u8]>`\u001b[0m\n\u001b[0m             `soroban_sdk::Val` implements `TryFromVal<E, &str>`\u001b[0m\n\u001b[0m             `soroban_sdk::Val` implements `TryFromVal<E, ()>`\u001b[0m\n\u001b[0m             `soroban_sdk::Val` implements `TryFromVal<E, (T0, T1)>`\u001b[0m\n\u001b[0m             `soroban_sdk::Val` implements `TryFromVal<E, (T0, T1, T2)>`\u001b[0m\n\u001b[0m             `soroban_sdk::Val` implements `TryFromVal<E, (T0, T1, T2, T3)>`\u001b[0m\n\u001b[0m             `soroban_sdk::Val` implements `TryFromVal<E, (T0, T1, T2, T3, T4)>`\u001b[0m\n\u001b[0m             `soroban_sdk::Val` implements `TryFromVal<E, (T0, T1, T2, T3, T4, T5)>`\u001b[0m\n\u001b[0m           and 87 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Val` to implement `FromVal<Env, DataSharingContract>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `DataSharingContract` to implement `IntoVal<Env, soroban_sdk::Val>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `contractimpl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `for<'a> soroban_sdk::Error: From<&'a soroban_sdk::String>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"data-sharing/src/lib.rs","byte_start":1264,"byte_end":1279,"line_start":58,"line_end":58,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":"the trait `for<'a> From<&'a soroban_sdk::String>` is not implemented for `soroban_sdk::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"data-sharing/src/lib.rs","byte_start":1264,"byte_end":1279,"line_start":58,"line_end":58,"column_start":1,"column_end":16,"is_primary":false,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[contractimpl]","def_site_span":{"file_name":"/Users/jaffars/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-macros-20.5.0/src/lib.rs","byte_start":5863,"byte_end":5940,"line_start":197,"line_end":197,"column_start":1,"column_end":78,"is_primary":false,"text":[{"text":"pub fn contractimpl(metadata: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'a soroban_sdk::String` to implement `for<'a> Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Error` to implement `for<'a> TryFrom<&'a soroban_sdk::String>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Val` to implement `TryFromVal<Env, core::result::Result<soroban_sdk::Vec<soroban_sdk::BytesN<32>>, soroban_sdk::String>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Val` to implement `FromVal<Env, core::result::Result<soroban_sdk::Vec<soroban_sdk::BytesN<32>>, soroban_sdk::String>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Result<Vec<BytesN<32>>, String>` to implement `IntoVal<Env, soroban_sdk::Val>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/Users/jaffars/Desktop/CycleBuddy-stellar/contracts/target/wasm32-unknown-unknown/release/deps/data_sharing_contract.long-type-17140434649742914523.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `for<'a> soroban_sdk::Error: From<&'a soroban_sdk::String>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdata-sharing/src/lib.rs:58:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[contractimpl]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `for<'a> From<&'a soroban_sdk::String>` is not implemented for `soroban_sdk::Error`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m             `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\u001b[0m\n\u001b[0m             `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m             `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m             `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m             `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\u001b[0m\n\u001b[0m             `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\u001b[0m\n\u001b[0m             `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'a soroban_sdk::String` to implement `for<'a> Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Error` to implement `for<'a> TryFrom<&'a soroban_sdk::String>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Val` to implement `TryFromVal<Env, core::result::Result<soroban_sdk::Vec<soroban_sdk::BytesN<32>>, soroban_sdk::String>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Val` to implement `FromVal<Env, core::result::Result<soroban_sdk::Vec<soroban_sdk::BytesN<32>>, soroban_sdk::String>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Result<Vec<BytesN<32>>, String>` to implement `IntoVal<Env, soroban_sdk::Val>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/Users/jaffars/Desktop/CycleBuddy-stellar/contracts/target/wasm32-unknown-unknown/release/deps/data_sharing_contract.long-type-17140434649742914523.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `contractimpl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `for<'a> soroban_sdk::Error: From<&'a soroban_sdk::String>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"data-sharing/src/lib.rs","byte_start":1264,"byte_end":1279,"line_start":58,"line_end":58,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":"the trait `for<'a> From<&'a soroban_sdk::String>` is not implemented for `soroban_sdk::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"data-sharing/src/lib.rs","byte_start":1264,"byte_end":1279,"line_start":58,"line_end":58,"column_start":1,"column_end":16,"is_primary":false,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[contractimpl]","def_site_span":{"file_name":"/Users/jaffars/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-macros-20.5.0/src/lib.rs","byte_start":5863,"byte_end":5940,"line_start":197,"line_end":197,"column_start":1,"column_end":78,"is_primary":false,"text":[{"text":"pub fn contractimpl(metadata: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'a soroban_sdk::String` to implement `for<'a> Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Error` to implement `for<'a> TryFrom<&'a soroban_sdk::String>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Val` to implement `TryFromVal<Env, core::result::Result<(), soroban_sdk::String>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Val` to implement `FromVal<Env, core::result::Result<(), soroban_sdk::String>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `core::result::Result<(), soroban_sdk::String>` to implement `IntoVal<Env, soroban_sdk::Val>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `for<'a> soroban_sdk::Error: From<&'a soroban_sdk::String>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdata-sharing/src/lib.rs:58:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[contractimpl]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `for<'a> From<&'a soroban_sdk::String>` is not implemented for `soroban_sdk::Error`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m             `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\u001b[0m\n\u001b[0m             `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m             `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m             `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m             `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\u001b[0m\n\u001b[0m             `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\u001b[0m\n\u001b[0m             `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'a soroban_sdk::String` to implement `for<'a> Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Error` to implement `for<'a> TryFrom<&'a soroban_sdk::String>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Val` to implement `TryFromVal<Env, core::result::Result<(), soroban_sdk::String>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Val` to implement `FromVal<Env, core::result::Result<(), soroban_sdk::String>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `core::result::Result<(), soroban_sdk::String>` to implement `IntoVal<Env, soroban_sdk::Val>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `contractimpl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `for<'a> soroban_sdk::Error: From<&'a soroban_sdk::String>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"data-sharing/src/lib.rs","byte_start":1264,"byte_end":1279,"line_start":58,"line_end":58,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":"the trait `for<'a> From<&'a soroban_sdk::String>` is not implemented for `soroban_sdk::Error`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"data-sharing/src/lib.rs","byte_start":1264,"byte_end":1279,"line_start":58,"line_end":58,"column_start":1,"column_end":16,"is_primary":false,"text":[{"text":"#[contractimpl]","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[contractimpl]","def_site_span":{"file_name":"/Users/jaffars/.cargo/registry/src/index.crates.io-6f17d22bba15001f/soroban-sdk-macros-20.5.0/src/lib.rs","byte_start":5863,"byte_end":5940,"line_start":197,"line_end":197,"column_start":1,"column_end":78,"is_primary":false,"text":[{"text":"pub fn contractimpl(metadata: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\n  `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\n  `soroban_sdk::Error` implements `From<ConversionError>`\n  `soroban_sdk::Error` implements `From<Infallible>`\n  `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\n  `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'a soroban_sdk::String` to implement `for<'a> Into<soroban_sdk::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Error` to implement `for<'a> TryFrom<&'a soroban_sdk::String>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Val` to implement `TryFromVal<Env, core::result::Result<soroban_sdk::Vec<AccessLog>, soroban_sdk::String>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `soroban_sdk::Val` to implement `FromVal<Env, core::result::Result<soroban_sdk::Vec<AccessLog>, soroban_sdk::String>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `core::result::Result<soroban_sdk::Vec<AccessLog>, soroban_sdk::String>` to implement `IntoVal<Env, soroban_sdk::Val>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `for<'a> soroban_sdk::Error: From<&'a soroban_sdk::String>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdata-sharing/src/lib.rs:58:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[contractimpl]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `for<'a> From<&'a soroban_sdk::String>` is not implemented for `soroban_sdk::Error`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m             `soroban_sdk::Error` implements `From<&soroban_sdk::Error>`\u001b[0m\n\u001b[0m             `soroban_sdk::Error` implements `From<(soroban_sdk::xdr::ScErrorType, soroban_sdk::xdr::ScErrorCode)>`\u001b[0m\n\u001b[0m             `soroban_sdk::Error` implements `From<ConversionError>`\u001b[0m\n\u001b[0m             `soroban_sdk::Error` implements `From<Infallible>`\u001b[0m\n\u001b[0m             `soroban_sdk::Error` implements `From<soroban_env_common::symbol::SymbolError>`\u001b[0m\n\u001b[0m             `soroban_sdk::Error` implements `From<soroban_sdk::xdr::Error>`\u001b[0m\n\u001b[0m             `soroban_sdk::Error` implements `From<soroban_sdk::xdr::ScError>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'a soroban_sdk::String` to implement `for<'a> Into<soroban_sdk::Error>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Error` to implement `for<'a> TryFrom<&'a soroban_sdk::String>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Val` to implement `TryFromVal<Env, core::result::Result<soroban_sdk::Vec<AccessLog>, soroban_sdk::String>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `soroban_sdk::Val` to implement `FromVal<Env, core::result::Result<soroban_sdk::Vec<AccessLog>, soroban_sdk::String>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `core::result::Result<soroban_sdk::Vec<AccessLog>, soroban_sdk::String>` to implement `IntoVal<Env, soroban_sdk::Val>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `contractimpl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `env`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"data-sharing/src/lib.rs","byte_start":10235,"byte_end":10238,"line_start":328,"line_end":328,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"    fn save_contract(env: &Env, contract: &DataSharingContract) {","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"data-sharing/src/lib.rs","byte_start":10235,"byte_end":10238,"line_start":328,"line_end":328,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"    fn save_contract(env: &Env, contract: &DataSharingContract) {","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":"_env","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `env`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdata-sharing/src/lib.rs:328:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m328\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn save_contract(env: &Env, contract: &DataSharingContract) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_env`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `contract`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"data-sharing/src/lib.rs","byte_start":10246,"byte_end":10254,"line_start":328,"line_end":328,"column_start":33,"column_end":41,"is_primary":true,"text":[{"text":"    fn save_contract(env: &Env, contract: &DataSharingContract) {","highlight_start":33,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"data-sharing/src/lib.rs","byte_start":10246,"byte_end":10254,"line_start":328,"line_end":328,"column_start":33,"column_end":41,"is_primary":true,"text":[{"text":"    fn save_contract(env: &Env, contract: &DataSharingContract) {","highlight_start":33,"highlight_end":41}],"label":null,"suggested_replacement":"_contract","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `contract`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdata-sharing/src/lib.rs:328:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m328\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn save_contract(env: &Env, contract: &DataSharingContract) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_contract`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 10 previous errors; 3 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 10 previous errors; 3 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0061, E0277, E0308.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0061, E0277, E0308.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0061`.\u001b[0m\n"}
